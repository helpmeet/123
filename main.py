import time
from datetime import datetime, timezone
import threading
import requests

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
POLL_INTERVAL = 60  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞, —Å–µ–∫
START_BUDGET = 6000.0

TELEGRAM_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
TELEGRAM_CHAT_ID = "YOUR_TELEGRAM_CHAT_ID"
API_KEY = "YOUR_3COMMAS_API_KEY"
BOT_ID = "YOUR_BOT_ID"

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
known_deals = {}
accumulated_profit_usd = 0.0


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def parse_float(value):
    try:
        return float(value)
    except (TypeError, ValueError):
        return 0.0


def send_telegram_message(text):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "parse_mode": "HTML"
    }
    try:
        requests.post(url, json=payload)
    except Exception as e:
        print(f"[Telegram] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")


def get_deals():
    try:
        url = "https://api.3commas.io/public/api/ver1/deals"
        params = {"bot_id": BOT_ID, "limit": 100}
        headers = {"APIKEY": API_KEY}
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"[Deals] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")
        return []


def get_bot_stats():
    try:
        url = f"https://api.3commas.io/public/api/ver1/bots/{BOT_ID}/stats"
        headers = {"APIKEY": API_KEY}
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"[Stats] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return None


def format_duration(seconds):
    h = seconds // 3600
    m = (seconds % 3600) // 60
    s = seconds % 60
    return f"{h}—á {m}–º {s}—Å"


# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–¥–µ–ª–æ–∫ ===
def monitor_deals():
    global accumulated_profit_usd
    print(f"[{datetime.now(timezone.utc)}] ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–¥–µ–ª–æ–∫")
    while True:
        deals = get_deals()
        print(f"[{datetime.now(timezone.utc)}] –ü–æ–ª—É—á–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {len(deals)}")
        for deal in deals:
            deal_id = deal.get("id")
            status = deal.get("status", "")
            pair = deal.get("pair", "")
            dca = deal.get("completed_safety_orders_count", 0)

            bought_avg = parse_float(deal.get("bought_average"))
            bought_vol_raw = parse_float(deal.get("bought_volume"))
            bought_vol = bought_vol_raw * 10  # –£–º–Ω–æ–∂–∞–µ–º –æ–±—ä–µ–º –Ω–∞ 10
            profit_pct = parse_float(deal.get("actual_profit_percentage"))

            # –ü—Ä–∏–±—ã–ª—å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (—É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 10)
            profit_usd = bought_vol_raw * (profit_pct / 100) * 10

            duration_sec = deal.get("duration_in_seconds", 0)

            if deal_id not in known_deals:
                msg = (
                    f"üìà <b>–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞</b> –ø–æ –ø–∞—Ä–µ <b>{pair}</b>\n"
                    f"üü¢ –°—Ç–∞—Ç—É—Å: <code>{status}</code>\n"
                    f"üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {bought_avg:.4f}\n"
                    f"üì¶ –û–±—ä—ë–º: {bought_vol:.2f} USDT"
                )
                send_telegram_message(msg)
                known_deals[deal_id] = {"status": status, "dca": dca}
            else:
                prev = known_deals[deal_id]

                if dca > prev["dca"]:
                    msg = (
                        f"‚ûï <b>–î–æ–∫—É–ø–∏–ª</b> #{dca} –≤ —Å–¥–µ–ª–∫–µ <b>{pair}</b>\n"
                        f"üìä –û–±—ä—ë–º: {bought_vol:.2f} USDT"
                    )
                    send_telegram_message(msg)
                    known_deals[deal_id]["dca"] = dca

                if status == "completed" and prev["status"] != "completed":
                    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å
                    accumulated_profit_usd += profit_usd

                    stats = get_bot_stats()
                    if stats:
                        start_date_raw = stats.get("start_date", None)
                        days_running = 1
                        roi = 0.0
                        if start_date_raw:
                            try:
                                start_date = datetime.strptime(start_date_raw, "%Y-%m-%d")
                                days_running = max((datetime.now() - start_date).days, 1)
                                roi = (accumulated_profit_usd / START_BUDGET) / days_running * 365 * 100
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ ROI: {e}")

                        positive_deals = stats.get("positive_deals", 0)
                        negative_deals = stats.get("negative_deals", 0)
                        completed_deals = stats.get("completed_deals", 0)
                        profit_total = stats.get("profit_total", 0.0)
                        bot_name = stats.get("bot_name", "–Ω/–¥")

                        current_balance = START_BUDGET + accumulated_profit_usd

                        msg = (
                            f"‚úÖ <b>–°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>: <b>{pair}</b>\n"
                            f"üìà –ü—Ä–∏–±—ã–ª—å: {profit_pct:.2f}%\n"
                            f"üí∞ –í –¥–æ–ª–ª–∞—Ä–∞—Ö: {profit_usd:.2f} USDT\n"
                            f"üíµ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {bought_avg:.4f}\n"
                            f"üì¶ –û–±—ä—ë–º: {bought_vol:.2f} USDT\n"
                            f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(duration_sec)}\n\n"
                            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>\n"
                            f"ü§ñ {bot_name}\n"
                            f"üìÖ –°—Ç–∞—Ä—Ç: {start_date_raw} ({days_running} –¥–Ω–µ–π)\n"
                            f"üîÅ –°–¥–µ–ª–æ–∫: {completed_deals}\n"
                            f"üìà –ü–ª—é—Å–æ–≤—ã—Ö: {positive_deals}  üìâ –ú–∏–Ω—É—Å–æ–≤—ã—Ö: {negative_deals}\n"
                            f"üíº –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${START_BUDGET:.2f}\n"
                            f"üìä –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${profit_total:.2f}\n"
                            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${current_balance:.2f}\n"
                            f"üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–≥–æ–¥–æ–≤—ã—Ö): {roi:.2f}%"
                        )
                    else:
                        msg = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞."

                    send_telegram_message(msg)
                    known_deals[deal_id]["status"] = status

        time.sleep(POLL_INTERVAL)


if __name__ == "__main__":
    # –¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥ –≤–Ω–µ—à–Ω–µ–≥–æ IP –∏–ª–∏ –∑–∞–ø—É—Å–∫ —Ñ–µ–π–∫–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    monitor_deals()
